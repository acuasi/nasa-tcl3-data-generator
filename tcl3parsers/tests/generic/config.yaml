---
# Specify which parsers you want to run. If this is empty, then all parsers will run
run:
    - con1

# Specify all new parsers below.

# required_files:
# The order they are specified below is the order they will be added as parameters when
# the parser is run.
# Following each specified file is the regex or part of the name that will be searched for.
#
# The output file name is automatically added as the last
# parameter with the format {parser_name}_data_flight_{number}.json
#
# Parser Naming:
# The entry function called from the outside world for every parser must be named the same as it's file name.
#
# file_parsers:
# The key of file parsers must correspond with a required_file shortname and the value must be
# the name of the file parser without .py. File parsers are
# File Parsers are passed the model and the filename (in that order) and are expected to return the model.
#
# variable_parsers:
# The key of the variable parser must correspond to a master variable. If the master variable it corresponds to is nested,
# then use brackets, without inner quotes and with quotes surrounding the entire key optional. Ex. topLevel[subLevel] or 'topLevel[subLevel]'
# Variable Parsers are passed a dictionary containing all of the filenames, with the file's shortname as the key
#
# global_parsers:
# The use of these parsers is discouraged. These parsers are passed the model and a dictionary containing all of the filenames
# and are expected to return the model. These parsers are the most risky/inefficient to use as they are passed all of the data
# and control what the entire model is set to.
#

parsers:
    cns1:
        swagger_hub_spec: https://app.swaggerhub.com/apis/utm/tcl3-cns/v2
        sub_parser: flight_data
        required_files:
            MI_FILE:
                - mission_insight.csv
            DF_FILE:
                - .log
            FIELD_VARS:
                - field_vars.csv
        file_parsers:
            MI_FILE:
                parser: mission_insight
            DF_FILE:
                parser: cns_data_flash
            FIELD_VARS:
                parser: field_vars_cns1
        variable_parsers:
            fType:
                exact: CNS1
            UTM-TCL3-DMP-RevF-CNSPDF:
                exact: UTM-ACUASI-CNS-1.pdf
            plannedContingency[plannedContingencyLoiterAlt_ft]:
                exact: '[0]'
            plannedContingency[plannedContingencyLoiterRadius_ft]:
                exact: '[0]'

    cns2:
        swagger_hub_spec: https://app.swaggerhub.com/apis/utm/tcl3-cns/v2
        sub_parser: flight_data
        required_files:
            MI_FILE:
                - mission_insight.csv
                - ^CNS2_.+Flight.+\.csv
            DF_FILE:
                - .log
            RADAR_FILE:
                - Radar Flight
        file_parsers:
            MI_FILE:
                parser: mission_insight
            DF_FILE:
                parser: cns_data_flash
        variable_parsers:
            fType:
                exact: CNS2
            UTM-TCL3-DMP-RevF-CNSPDF:
                exact: UTM-ACUASI-CNS-2.pdf
            plannedContingency[plannedContingencyLoiterAlt_ft]:
                exact: '[0]'
            plannedContingency[plannedContingencyLoiterRadius_ft]:
                exact: '[0]'
            uasTruth:
                parser: uasTruth
            uasTruth[estimatedTruthPositionError95Prct_in]:
                exception: None

    con1:
        swagger_hub_spec: https://app.swaggerhub.com/apis/utm/tcl3-con/v2
        sub_parser: flight_data
        required_files:
            MI_FILE:
                - mission_insight.csv
                - CON1_.+Flight.+\.csv
            DF_FILE:
                - .log
            FIELD_VARS:
                - field_vars.csv
            WEATHER_FILE:
                - _weather_file.csv
        file_parsers:
            MI_FILE:
                parser: mission_insight
            FIELD_VARS:
                parser: generic_field_vars
            DF_FILE:
                parser: con_data_flash
            WEATHER_FILE:
                parser: weather_file
        variable_parsers:
            fType:
                exact: CON1
            UTM-TCL3-DMP-RevF-CONPDF:
                exact: UTM-ACUASI-CON-1.pdf
            c2PacketLoss[c2PacketLossRateAircraftPrct_nonDim]:
                exception: None
            c2PacketLoss[c2PacketLossRateGcsPrct_nonDim]:
                exception: None


# These parsers are the same as regular parsers, except they get their files from a parent parser, operate concurrently, and output to the parent's folder
sub_parsers:
    flight_data:
        swagger_hub_spec: https://app.swaggerhub.com/apis/utm/tcl3-flight-data/v3
        required_files:
            MI_FILE:
                - mission_insight.csv
                - ^[A-Z]{3,3}[1-9]_.+Flight.+\.csv
            DF_FILE:
                - .log
        global_parsers:
            - flight_data_df
        file_parsers:
            MI_FILE:
                parser: mission_insight
        variable_parsers:
            fType:
                exact: FLIGHT_DATA
            auxiliaryUASOperation:
                parser: auxiliaryUASOperation
            aircraftFlightPlan[wpTargetGroundSpeed_ftPerSec]:
                exception: None
            aircraftFlightPlan[wpTargetAirSpeed_ftPerSec]:
                exception: None
            uasState[value]:
                exception: None
            aircraftFlightPlan[wpType_nonDim]:
                exception: None

# This specifies the global output directory where all parsed JSON files will be placed.
# This can either be a relative or absolute path, if nothing is specified, then
# the JSON files will be placed in whatever directory the runner file is run from.
output_directory: "output"

# If this is set, then the a local copy of the specification from swaggerhub will be checked for first before it is scraped from swaggerhub
cache_specifications: true

# This is directory where specifications will be checked for before scraping.
specification_cache_directory: "specifications"

# This directory holds all of the flight format folders and their associated data
parent_data_directory: flight_files

# This directory is inside of a format folder and contains all of the flights
flight_data_directory: data

...
